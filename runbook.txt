CSV Watchdog Monitor - Runbook


1. Prepare Python Virtual Environment

mkdir -p CSV_Watchdog_Monitor/python-env
python3 -m venv CSV_Watchdog_Monitor/python-env
source CSV_Watchdog_Monitor/python-env/bin/activate


2. Create requirements.txt

Create a file CSV_Watchdog_Monitor/requirements.txt with:

pandas>=1.0.0
filelock>=3.0.0
(Note: removed polars, psutil, PyYAML from your previous since the script uses pandas & filelock only)

3. Install Dependencies

pip install --upgrade pip
pip install -r CSV_Watchdog_Monitor/requirements.txt
pip freeze > CSV_Watchdog_Monitor/requirements.lock.txt


4. Create Configuration File
Create CSV_Watchdog_Monitor/config.json with contents:


{
  "watch_dir": "csv_inbox",
  "archive_dir": "csv_archive",
  "merged_file": "final_clusters_data.csv",
  "metadata_file": "merged_metadata.json",
  "key_column": "cluster_name",
  "required_columns": ["cluster_name", "data_column1", "data_column2"],
  "checksum_wait_seconds": 5,
  "chunk_size": 4096,
  "max_file_size_mb": 500,
  "supported_extensions": [".csv"],
  "log_file": "csv_watchdog.log",
  "log_level": "INFO",
  "log_to_console": true,
  "log_max_bytes": 1048576,
  "log_backup_count": 5,
  "lock_timeout_seconds": 30,
  "max_clusters_in_log": 20,
  "csv_delimiter": ",",
  "csv_encoding": "utf-8"
}

5. Prepare Directory Structure

mkdir -p csv_inbox csv_archive


6. Place the Script
Create CSV_Watchdog_Monitor/csv_watchdog_monitor.py with the full updated code (shared below).

7. Running the Monitor
Basic run:

python3 CSV_Watchdog_Monitor/csv_watchdog_monitor.py

Dry run (simulate processing without writing or archiving):

python3 CSV_Watchdog_Monitor/csv_watchdog_monitor.py --dry-run

8. Environment Variable for Config (Optional)
If you want to use a different config file location, set environment variable before running:

export CSV_MONITOR_CONFIG=/path/to/your/custom_config.json
python3 CSV_Watchdog_Monitor/csv_watchdog_monitor.py